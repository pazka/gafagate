[
    {
        "label": "DataHelper",
        "importPath": "data_process.data_helper",
        "description": "data_process.data_helper",
        "isExtraImport": true,
        "detail": "data_process.data_helper",
        "documentation": {}
    },
    {
        "label": "DataHelper",
        "importPath": "data_process.data_helper",
        "description": "data_process.data_helper",
        "isExtraImport": true,
        "detail": "data_process.data_helper",
        "documentation": {}
    },
    {
        "label": "DataDate",
        "importPath": "data_process.data_helper",
        "description": "data_process.data_helper",
        "isExtraImport": true,
        "detail": "data_process.data_helper",
        "documentation": {}
    },
    {
        "label": "DataPoint",
        "importPath": "data_process.data_helper",
        "description": "data_process.data_helper",
        "isExtraImport": true,
        "detail": "data_process.data_helper",
        "documentation": {}
    },
    {
        "label": "DataHelper",
        "importPath": "data_process.data_helper",
        "description": "data_process.data_helper",
        "isExtraImport": true,
        "detail": "data_process.data_helper",
        "documentation": {}
    },
    {
        "label": "DataHelper",
        "importPath": "data_process.data_helper",
        "description": "data_process.data_helper",
        "isExtraImport": true,
        "detail": "data_process.data_helper",
        "documentation": {}
    },
    {
        "label": "DataDate",
        "importPath": "data_process.data_helper",
        "description": "data_process.data_helper",
        "isExtraImport": true,
        "detail": "data_process.data_helper",
        "documentation": {}
    },
    {
        "label": "DataPoint",
        "importPath": "data_process.data_helper",
        "description": "data_process.data_helper",
        "isExtraImport": true,
        "detail": "data_process.data_helper",
        "documentation": {}
    },
    {
        "label": "DataHelper",
        "importPath": "data_process.data_helper",
        "description": "data_process.data_helper",
        "isExtraImport": true,
        "detail": "data_process.data_helper",
        "documentation": {}
    },
    {
        "label": "DataHelper",
        "importPath": "data_process.data_helper",
        "description": "data_process.data_helper",
        "isExtraImport": true,
        "detail": "data_process.data_helper",
        "documentation": {}
    },
    {
        "label": "DataDate",
        "importPath": "data_process.data_helper",
        "description": "data_process.data_helper",
        "isExtraImport": true,
        "detail": "data_process.data_helper",
        "documentation": {}
    },
    {
        "label": "DataPoint",
        "importPath": "data_process.data_helper",
        "description": "data_process.data_helper",
        "isExtraImport": true,
        "detail": "data_process.data_helper",
        "documentation": {}
    },
    {
        "label": "DataHelper",
        "importPath": "data_process.data_helper",
        "description": "data_process.data_helper",
        "isExtraImport": true,
        "detail": "data_process.data_helper",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Workbook",
        "importPath": "openpyxl",
        "description": "openpyxl",
        "isExtraImport": true,
        "detail": "openpyxl",
        "documentation": {}
    },
    {
        "label": "Workbook",
        "importPath": "openpyxl",
        "description": "openpyxl",
        "isExtraImport": true,
        "detail": "openpyxl",
        "documentation": {}
    },
    {
        "label": "Workbook",
        "importPath": "openpyxl",
        "description": "openpyxl",
        "isExtraImport": true,
        "detail": "openpyxl",
        "documentation": {}
    },
    {
        "label": "Workbook",
        "importPath": "openpyxl",
        "description": "openpyxl",
        "isExtraImport": true,
        "detail": "openpyxl",
        "documentation": {}
    },
    {
        "label": "Workbook",
        "importPath": "openpyxl",
        "description": "openpyxl",
        "isExtraImport": true,
        "detail": "openpyxl",
        "documentation": {}
    },
    {
        "label": "Workbook",
        "importPath": "openpyxl",
        "description": "openpyxl",
        "isExtraImport": true,
        "detail": "openpyxl",
        "documentation": {}
    },
    {
        "label": "load_workbook",
        "importPath": "openpyxl",
        "description": "openpyxl",
        "isExtraImport": true,
        "detail": "openpyxl",
        "documentation": {}
    },
    {
        "label": "Workbook",
        "importPath": "openpyxl",
        "description": "openpyxl",
        "isExtraImport": true,
        "detail": "openpyxl",
        "documentation": {}
    },
    {
        "label": "Cell",
        "importPath": "openpyxl.cell",
        "description": "openpyxl.cell",
        "isExtraImport": true,
        "detail": "openpyxl.cell",
        "documentation": {}
    },
    {
        "label": "Cell",
        "importPath": "openpyxl.cell",
        "description": "openpyxl.cell",
        "isExtraImport": true,
        "detail": "openpyxl.cell",
        "documentation": {}
    },
    {
        "label": "Cell",
        "importPath": "openpyxl.cell",
        "description": "openpyxl.cell",
        "isExtraImport": true,
        "detail": "openpyxl.cell",
        "documentation": {}
    },
    {
        "label": "Fixture",
        "importPath": "PyDMXControl.profiles.defaults",
        "description": "PyDMXControl.profiles.defaults",
        "isExtraImport": true,
        "detail": "PyDMXControl.profiles.defaults",
        "documentation": {}
    },
    {
        "label": "Fixture",
        "importPath": "PyDMXControl.profiles.defaults",
        "description": "PyDMXControl.profiles.defaults",
        "isExtraImport": true,
        "detail": "PyDMXControl.profiles.defaults",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "fixture",
        "importPath": "pytest",
        "description": "pytest",
        "isExtraImport": true,
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "RevenueData",
        "importPath": "data_process.data_revenue",
        "description": "data_process.data_revenue",
        "isExtraImport": true,
        "detail": "data_process.data_revenue",
        "documentation": {}
    },
    {
        "label": "RevenueData",
        "importPath": "data_process.data_revenue",
        "description": "data_process.data_revenue",
        "isExtraImport": true,
        "detail": "data_process.data_revenue",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "OpenDMXController",
        "importPath": "PyDMXControl.controllers",
        "description": "PyDMXControl.controllers",
        "isExtraImport": true,
        "detail": "PyDMXControl.controllers",
        "documentation": {}
    },
    {
        "label": "OpenDMXController",
        "importPath": "PyDMXControl.controllers",
        "description": "PyDMXControl.controllers",
        "isExtraImport": true,
        "detail": "PyDMXControl.controllers",
        "documentation": {}
    },
    {
        "label": "OpenDMXController",
        "importPath": "PyDMXControl.controllers",
        "description": "PyDMXControl.controllers",
        "isExtraImport": true,
        "detail": "PyDMXControl.controllers",
        "documentation": {}
    },
    {
        "label": "StairvilleFixture",
        "importPath": "fixtures.StairvilleFixture",
        "description": "fixtures.StairvilleFixture",
        "isExtraImport": true,
        "detail": "fixtures.StairvilleFixture",
        "documentation": {}
    },
    {
        "label": "StairvilleFixture",
        "importPath": "fixtures.StairvilleFixture",
        "description": "fixtures.StairvilleFixture",
        "isExtraImport": true,
        "detail": "fixtures.StairvilleFixture",
        "documentation": {}
    },
    {
        "label": "StairvilleFixture",
        "importPath": "fixtures.StairvilleFixture",
        "description": "fixtures.StairvilleFixture",
        "isExtraImport": true,
        "detail": "fixtures.StairvilleFixture",
        "documentation": {}
    },
    {
        "label": "ChauvetFixture",
        "importPath": "fixtures.ChauvetFixture",
        "description": "fixtures.ChauvetFixture",
        "isExtraImport": true,
        "detail": "fixtures.ChauvetFixture",
        "documentation": {}
    },
    {
        "label": "ChauvetFixture",
        "importPath": "fixtures.ChauvetFixture",
        "description": "fixtures.ChauvetFixture",
        "isExtraImport": true,
        "detail": "fixtures.ChauvetFixture",
        "documentation": {}
    },
    {
        "label": "ChauvetFixture",
        "importPath": "fixtures.ChauvetFixture",
        "description": "fixtures.ChauvetFixture",
        "isExtraImport": true,
        "detail": "fixtures.ChauvetFixture",
        "documentation": {}
    },
    {
        "label": "FinesData",
        "importPath": "data_process.data_fines",
        "description": "data_process.data_fines",
        "isExtraImport": true,
        "detail": "data_process.data_fines",
        "documentation": {}
    },
    {
        "label": "normalize",
        "importPath": "helpers",
        "description": "helpers",
        "isExtraImport": true,
        "detail": "helpers",
        "documentation": {}
    },
    {
        "label": "interpolate",
        "importPath": "helpers",
        "description": "helpers",
        "isExtraImport": true,
        "detail": "helpers",
        "documentation": {}
    },
    {
        "label": "InflationData",
        "importPath": "data_process.data_inflation",
        "description": "data_process.data_inflation",
        "isExtraImport": true,
        "detail": "data_process.data_inflation",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "FinesData",
        "kind": 6,
        "importPath": "data_process.data_fines",
        "description": "data_process.data_fines",
        "peekOfCode": "class FinesData(DataHelper):\n    def __init__(self, wb: Workbook):\n        self.data = []\n        sheet = wb[\"Fines\"]\n        raw_data: list[list[Cell]] = sheet[\"B2:B75\"]\n        month = 4\n        year = 2018\n        for data in raw_data:\n            if data[0].value is None:\n                self.data.append((date(year, month, 1), 0))",
        "detail": "data_process.data_fines",
        "documentation": {}
    },
    {
        "label": "DataHelper",
        "kind": 6,
        "importPath": "data_process.data_helper",
        "description": "data_process.data_helper",
        "peekOfCode": "class DataHelper():\n    def __init__(self, data):\n        self.data: list[DataPoint] = data\n        self.min_date: date = None\n        self.max_date: date = None\n        self.min_value: float = None\n        self.max_value: float = None\n        self.data.sort(key=lambda x: x[0])\n        self.min_date = self.data[0][0]\n        self.max_date = self.data[-1][0]",
        "detail": "data_process.data_helper",
        "documentation": {}
    },
    {
        "label": "InflationData",
        "kind": 6,
        "importPath": "data_process.data_inflation",
        "description": "data_process.data_inflation",
        "peekOfCode": "class InflationData(DataHelper):\n    def __init__(self, wb: Workbook):\n        sheet = wb[\"Inflation\"]\n        # yearly data from 2011 to 2023\n        raw_data: list[list[Cell]] = sheet[\"B3:B16\"]\n        yearly_data: list[DataPoint] = []\n        for i, data in enumerate(raw_data):\n            if type(data[0].value) == str:\n                value = float(data[0].value.replace(\"%\", \"\"))\n            else:",
        "detail": "data_process.data_inflation",
        "documentation": {}
    },
    {
        "label": "RevenueData",
        "kind": 6,
        "importPath": "data_process.data_revenue",
        "description": "data_process.data_revenue",
        "peekOfCode": "class RevenueData(DataHelper):\n    def __init__(self, wb: Workbook):\n        sheet = wb[\"Revenue\"]\n        # yearly data from 2011 to 2023\n        raw_data: list[list[Cell]] = sheet[\"G2:G14\"]\n        yearly_data: list[DataPoint] = []\n        for i, data in enumerate(raw_data):\n            if type(data[0].value) == str:\n                value = float(data[0].value.replace(\",\", \"\"))\n            else:",
        "detail": "data_process.data_revenue",
        "documentation": {}
    },
    {
        "label": "ChauvetFixture",
        "kind": 6,
        "importPath": "fixtures.ChauvetFixture",
        "description": "fixtures.ChauvetFixture",
        "peekOfCode": "class ChauvetFixture(Fixture):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        # get mode from args\n        self.mode = kwargs.get('mode', 4)\n        if self.mode == 4:\n            self._register_channel('red')\n            self._register_channel_aliases('red', 'r')\n            self._register_channel('green')\n            self._register_channel_aliases('green', 'g')",
        "detail": "fixtures.ChauvetFixture",
        "documentation": {}
    },
    {
        "label": "StairvilleFixture",
        "kind": 6,
        "importPath": "fixtures.StairvilleFixture",
        "description": "fixtures.StairvilleFixture",
        "peekOfCode": "class StairvilleFixture(Fixture):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self._register_channel('dimmer')\n        self._register_channel_aliases('dimmer', 'dim')\n        self._register_channel('Strobe')\n        self._register_channel_aliases('strobe', 'st')\n        self._register_channel('red')\n        self._register_channel_aliases('red', 'r')\n        self._register_channel('green')",
        "detail": "fixtures.StairvilleFixture",
        "documentation": {}
    },
    {
        "label": "test_initialization",
        "kind": 2,
        "importPath": "tests.test_data_helper",
        "description": "tests.test_data_helper",
        "peekOfCode": "def test_initialization():\n    data = [\n        (date(2018, 1, 1), 10.0),\n        (date(2020, 6, 1), 20.0),\n        (date(2021, 6, 1), 30.0),\n        (date(2023, 6, 1), 40.0)\n    ]\n    helper = DataHelper(data)\n    assert helper.min_date == date(2020, 6, 1)\n    assert helper.max_date == date(2023, 6, 1)",
        "detail": "tests.test_data_helper",
        "documentation": {}
    },
    {
        "label": "test_get_value",
        "kind": 2,
        "importPath": "tests.test_data_helper",
        "description": "tests.test_data_helper",
        "peekOfCode": "def test_get_value():\n    data = [\n        (date(2020, 6, 1), 20.0),\n        (date(2021, 6, 1), 30.0)\n    ]\n    helper = DataHelper(data)\n    assert helper.get_value(date(2020, 6, 1)) == 20.0\n    assert helper.get_value(date(2021, 6, 1)) == 30.0\n    assert helper.get_value(date(2019, 1, 1)) is None\ndef test_to_uv():",
        "detail": "tests.test_data_helper",
        "documentation": {}
    },
    {
        "label": "test_to_uv",
        "kind": 2,
        "importPath": "tests.test_data_helper",
        "description": "tests.test_data_helper",
        "peekOfCode": "def test_to_uv():\n    data = [\n        (date(2020, 6, 1), 20.0),\n        (date(2021, 6, 1), 30.0),\n        (date(2022, 6, 1), 40.0)\n    ]\n    helper = DataHelper(data)\n    assert helper.to_uv((date(2020, 6, 1), 20.0)) == 0.0\n    assert helper.to_uv((date(2022, 6, 1), 40.0)) == 1.0\n    assert helper.to_uv((date(2021, 6, 1), 30.0)) == 0.5",
        "detail": "tests.test_data_helper",
        "documentation": {}
    },
    {
        "label": "test_filter_dates",
        "kind": 2,
        "importPath": "tests.test_data_helper",
        "description": "tests.test_data_helper",
        "peekOfCode": "def test_filter_dates():\n    data = [\n        (date(2018, 1, 1), 10.0),\n        (date(2020, 6, 1), 20.0),\n        (date(2021, 6, 1), 30.0),\n        (date(2023, 6, 1), 40.0)\n    ]\n    helper = DataHelper(data)\n    helper.filter_dates(date(2020, 1, 1), date(2021, 12, 31))\n    assert len(helper.data) == 2",
        "detail": "tests.test_data_helper",
        "documentation": {}
    },
    {
        "label": "test_clamp_values",
        "kind": 2,
        "importPath": "tests.test_data_helper",
        "description": "tests.test_data_helper",
        "peekOfCode": "def test_clamp_values():\n    data = [\n        (date(2020, 6, 1), 20.0),\n        (date(2021, 6, 1), 30.0),\n        (date(2022, 6, 1), 40.0)\n    ]\n    helper = DataHelper(data)\n    helper.clamp_values(25.0, 35.0)\n    assert helper.data == [\n        (date(2020, 6, 1), 25.0),",
        "detail": "tests.test_data_helper",
        "documentation": {}
    },
    {
        "label": "setup_wb",
        "kind": 2,
        "importPath": "tests.test_data_revenue",
        "description": "tests.test_data_revenue",
        "peekOfCode": "def setup_wb():\n    wb = Workbook()\n    wb.create_sheet(\"data_revenue\")\n    sheet = wb[\"data_revenue\"]\n    sheet[\"G2\"] = \"1,000\"  # 2011\n    sheet[\"G3\"] = \"2,000\"\n    sheet[\"G4\"] = \"3,000.95\"\n    sheet[\"G5\"] = \"4,000\"\n    sheet[\"G6\"] = \"5,000.15\"\n    sheet[\"G7\"] = \"6,600\"",
        "detail": "tests.test_data_revenue",
        "documentation": {}
    },
    {
        "label": "test_data_revenue_clamped_to_2019_and_spread_across_the_year",
        "kind": 2,
        "importPath": "tests.test_data_revenue",
        "description": "tests.test_data_revenue",
        "peekOfCode": "def test_data_revenue_clamped_to_2019_and_spread_across_the_year(setup_wb: Workbook):\n    data = RevenueData(setup_wb)\n    sheet = setup_wb[\"data_revenue\"]\n    assert data[0][0].year == 2019\n    assert data[0][0].month == 1\n    assert data[0][1] == (9000 / 12)\n    assert data[-1][0].year == 2023\n    assert data[-1][0].month == 12\n    assert data[-1][1] == 13000",
        "detail": "tests.test_data_revenue",
        "documentation": {}
    },
    {
        "label": "dmx",
        "kind": 5,
        "importPath": "cycle",
        "description": "cycle",
        "peekOfCode": "dmx = OpenDMXController()\nfix: StairvilleFixture = dmx.add_fixture(\n    StairvilleFixture, name=\"StairvilleFixture-2\", start_channel=10)\nfix1: ChauvetFixture = dmx.add_fixture(\n    ChauvetFixture, name=\"ChauvetFixture\", start_channel=1, mode=9)\ncolors = [(255, 0, 0), (0, 255, 0), (0, 0, 255)]\nfix.dim(255, 1)\nfix1.dim(255, 1)\nwhile True:\n    for color in colors:",
        "detail": "cycle",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": "cycle",
        "description": "cycle",
        "peekOfCode": "colors = [(255, 0, 0), (0, 255, 0), (0, 0, 255)]\nfix.dim(255, 1)\nfix1.dim(255, 1)\nwhile True:\n    for color in colors:\n        print(\"color :\", color)\n        fix.simple_color(color)\n        fix1.simple_color(color)\n        sleep(0.001)",
        "detail": "cycle",
        "documentation": {}
    },
    {
        "label": "dmx",
        "kind": 5,
        "importPath": "data",
        "description": "data",
        "peekOfCode": "dmx = OpenDMXController()\nfixture1: StairvilleFixture = dmx.add_fixture(\n    StairvilleFixture, name=\"StairvilleFixture-2\", start_channel=10)\nfixture2: ChauvetFixture = dmx.add_fixture(\n    ChauvetFixture, name=\"ChauvetFixture\", start_channel=1, mode=9)\n# os test that file exists\nif os.path.exists(\"data/data.xlsx\"):\n    print(\"File exists\")\nelse:\n    print(\"File does not exist\")",
        "detail": "data",
        "documentation": {}
    },
    {
        "label": "wb",
        "kind": 5,
        "importPath": "data",
        "description": "data",
        "peekOfCode": "wb = load_workbook(filename=\"data/data.xlsx\", read_only=True, data_only=True)\nrevenue_data = RevenueData(wb)\nfines_data = FinesData(wb)\ninflation_data = InflationData(wb)\nwb.close()\nfixture1.dim(255, 1/200)\nfixture2.dim(255, 1)\ndim_speed = 0.01\n#color_transition_time = 1\ncolor_transition_time = 1",
        "detail": "data",
        "documentation": {}
    },
    {
        "label": "revenue_data",
        "kind": 5,
        "importPath": "data",
        "description": "data",
        "peekOfCode": "revenue_data = RevenueData(wb)\nfines_data = FinesData(wb)\ninflation_data = InflationData(wb)\nwb.close()\nfixture1.dim(255, 1/200)\nfixture2.dim(255, 1)\ndim_speed = 0.01\n#color_transition_time = 1\ncolor_transition_time = 1\nwhile True:",
        "detail": "data",
        "documentation": {}
    },
    {
        "label": "fines_data",
        "kind": 5,
        "importPath": "data",
        "description": "data",
        "peekOfCode": "fines_data = FinesData(wb)\ninflation_data = InflationData(wb)\nwb.close()\nfixture1.dim(255, 1/200)\nfixture2.dim(255, 1)\ndim_speed = 0.01\n#color_transition_time = 1\ncolor_transition_time = 1\nwhile True:\n    prev_color = (0, 0, 0)",
        "detail": "data",
        "documentation": {}
    },
    {
        "label": "inflation_data",
        "kind": 5,
        "importPath": "data",
        "description": "data",
        "peekOfCode": "inflation_data = InflationData(wb)\nwb.close()\nfixture1.dim(255, 1/200)\nfixture2.dim(255, 1)\ndim_speed = 0.01\n#color_transition_time = 1\ncolor_transition_time = 1\nwhile True:\n    prev_color = (0, 0, 0)\n    for i in range(0, len(revenue_data)):",
        "detail": "data",
        "documentation": {}
    },
    {
        "label": "dim_speed",
        "kind": 5,
        "importPath": "data",
        "description": "data",
        "peekOfCode": "dim_speed = 0.01\n#color_transition_time = 1\ncolor_transition_time = 1\nwhile True:\n    prev_color = (0, 0, 0)\n    for i in range(0, len(revenue_data)):\n        revenue_data_point = revenue_data[i]\n        fines_data_point = fines_data[i]\n        inflation_data_point = inflation_data[i]\n        new_color_uv = (",
        "detail": "data",
        "documentation": {}
    },
    {
        "label": "#color_transition_time",
        "kind": 5,
        "importPath": "data",
        "description": "data",
        "peekOfCode": "#color_transition_time = 1\ncolor_transition_time = 1\nwhile True:\n    prev_color = (0, 0, 0)\n    for i in range(0, len(revenue_data)):\n        revenue_data_point = revenue_data[i]\n        fines_data_point = fines_data[i]\n        inflation_data_point = inflation_data[i]\n        new_color_uv = (\n            revenue_data.to_uv(revenue_data_point) * 255,",
        "detail": "data",
        "documentation": {}
    },
    {
        "label": "color_transition_time",
        "kind": 5,
        "importPath": "data",
        "description": "data",
        "peekOfCode": "color_transition_time = 1\nwhile True:\n    prev_color = (0, 0, 0)\n    for i in range(0, len(revenue_data)):\n        revenue_data_point = revenue_data[i]\n        fines_data_point = fines_data[i]\n        inflation_data_point = inflation_data[i]\n        new_color_uv = (\n            revenue_data.to_uv(revenue_data_point) * 255,\n            fines_data.to_uv(fines_data_point) * 255,",
        "detail": "data",
        "documentation": {}
    },
    {
        "label": "dmx",
        "kind": 5,
        "importPath": "debug",
        "description": "debug",
        "peekOfCode": "dmx = OpenDMXController()\nfixture = dmx.add_fixture(\n    StairvilleFixture, name=\"StairvilleFixture-2\", start_channel=10)\nfixture2 = dmx.add_fixture(\n    ChauvetFixture, name=\"ChauvetFixture\", start_channel=1, mode=9)\ndmx.web_control()\n# Once the console debug mode is exited the script will continue, to stop it\n#  exiting and stopping DMX output when can use a built-in sleep function.\n# This sleep function will wait until enter is pressed in the console before continuing.\ndmx.sleep_till_enter()",
        "detail": "debug",
        "documentation": {}
    },
    {
        "label": "fixture",
        "kind": 5,
        "importPath": "debug",
        "description": "debug",
        "peekOfCode": "fixture = dmx.add_fixture(\n    StairvilleFixture, name=\"StairvilleFixture-2\", start_channel=10)\nfixture2 = dmx.add_fixture(\n    ChauvetFixture, name=\"ChauvetFixture\", start_channel=1, mode=9)\ndmx.web_control()\n# Once the console debug mode is exited the script will continue, to stop it\n#  exiting and stopping DMX output when can use a built-in sleep function.\n# This sleep function will wait until enter is pressed in the console before continuing.\ndmx.sleep_till_enter()\ndmx.close()",
        "detail": "debug",
        "documentation": {}
    },
    {
        "label": "fixture2",
        "kind": 5,
        "importPath": "debug",
        "description": "debug",
        "peekOfCode": "fixture2 = dmx.add_fixture(\n    ChauvetFixture, name=\"ChauvetFixture\", start_channel=1, mode=9)\ndmx.web_control()\n# Once the console debug mode is exited the script will continue, to stop it\n#  exiting and stopping DMX output when can use a built-in sleep function.\n# This sleep function will wait until enter is pressed in the console before continuing.\ndmx.sleep_till_enter()\ndmx.close()",
        "detail": "debug",
        "documentation": {}
    },
    {
        "label": "normalize",
        "kind": 2,
        "importPath": "helpers",
        "description": "helpers",
        "peekOfCode": "def normalize(value: float, min_val: float, max_val: float) -> float:\n    return (value - min_val) / (max_val - min_val)\ndef interpolate(min_value: float, max_value: float, normalized_value: float) -> float:\n    return min_value + (max_value - min_value) * normalized_value\ndef normalize(value: tuple[float, float, float], min_val: tuple[float, float, float], max_val: tuple[float, float, float]) -> tuple[float, float, float]:\n    return tuple((v - min_v) / (max_v - min_v) for v, min_v, max_v in zip(value, min_val, max_val))\nfrom typing import Tuple\ndef interpolate(min_val: Tuple[float, float, float], max_val: Tuple[float, float, float], normalized_val: float) -> Tuple[float, float, float]:\n    return tuple(min_v + (max_v - min_v) * normalized_val for min_v, max_v in zip(min_val, max_val))",
        "detail": "helpers",
        "documentation": {}
    },
    {
        "label": "interpolate",
        "kind": 2,
        "importPath": "helpers",
        "description": "helpers",
        "peekOfCode": "def interpolate(min_value: float, max_value: float, normalized_value: float) -> float:\n    return min_value + (max_value - min_value) * normalized_value\ndef normalize(value: tuple[float, float, float], min_val: tuple[float, float, float], max_val: tuple[float, float, float]) -> tuple[float, float, float]:\n    return tuple((v - min_v) / (max_v - min_v) for v, min_v, max_v in zip(value, min_val, max_val))\nfrom typing import Tuple\ndef interpolate(min_val: Tuple[float, float, float], max_val: Tuple[float, float, float], normalized_val: float) -> Tuple[float, float, float]:\n    return tuple(min_v + (max_v - min_v) * normalized_val for min_v, max_v in zip(min_val, max_val))",
        "detail": "helpers",
        "documentation": {}
    },
    {
        "label": "normalize",
        "kind": 2,
        "importPath": "helpers",
        "description": "helpers",
        "peekOfCode": "def normalize(value: tuple[float, float, float], min_val: tuple[float, float, float], max_val: tuple[float, float, float]) -> tuple[float, float, float]:\n    return tuple((v - min_v) / (max_v - min_v) for v, min_v, max_v in zip(value, min_val, max_val))\nfrom typing import Tuple\ndef interpolate(min_val: Tuple[float, float, float], max_val: Tuple[float, float, float], normalized_val: float) -> Tuple[float, float, float]:\n    return tuple(min_v + (max_v - min_v) * normalized_val for min_v, max_v in zip(min_val, max_val))",
        "detail": "helpers",
        "documentation": {}
    },
    {
        "label": "interpolate",
        "kind": 2,
        "importPath": "helpers",
        "description": "helpers",
        "peekOfCode": "def interpolate(min_val: Tuple[float, float, float], max_val: Tuple[float, float, float], normalized_val: float) -> Tuple[float, float, float]:\n    return tuple(min_v + (max_v - min_v) * normalized_val for min_v, max_v in zip(min_val, max_val))",
        "detail": "helpers",
        "documentation": {}
    }
]